# -*- coding: utf-8 -*-
"""Bipi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oaF3o8JNAjIkOa1AOUNKZ2L6phxsGAVt

Importamos las librerias necesarias para poder trabajar con los datos entregados
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
import csv

"""Brindamos el acceso a colab para que pueda acceder a google drive y con ello entrar al repositorio donde encontramos nuestra data"""

from google.colab import drive
drive.mount('/content/drive/')

"""En caso se requiera de alguna alternativa para poder acceder a los datos podemos usar la libreria csv para leer ficheros de este tipo"""

with open('/content/drive/MyDrive/EjercicioBipi/customers.csv') as datos:
    customer = csv.reader(datos, delimiter=',')
    for row in customer:
        print(row)

"""Leemos el archivo .csv brindado para obtener los datos en una variable usando pandas"""

data = pd.read_csv('/content/drive/MyDrive/EjercicioBipi/customers.csv')

"""Los datos proporcionados los convertimos en un dataframe para el manejo eficiente de los datos"""

df = pd.DataFrame(data)

"""Mostramos una muestra de los datos para conocer acerca de sus cabeceras y la información que estos almacenan"""

df.head(5)

"""Para un manejo eficiente de los datos podemos visualizar el tipo de informacion que posee cada columna y aplicar asi las diversas funciones para limpieza de los mismps"""

df.info()

"""Validaremos que no existan datos repetidos y todos sean unicos"""

df.drop_duplicates()

"""Validamos que posee 2000 registros en el archivo proporcionado"""

original_total=df["CustomerID"].count()

original_total

"""Validamos la calidad de los datos por cada columna para saber que tratamiento brindar a datos que posiblemente sean inconsistentes
Nota: Se esta colocando como comentario la funcion sum para validar que la cantidad de datos mostrada en las agrupaciones sea acorde a la original
"""

df.groupby(["Gender"])["CustomerID"].count()#.sum ()

df.groupby(["Age"])["CustomerID"].count()#.sum()

df.groupby(["Annual Income ($)"])["CustomerID"].count()#.sum()

df.groupby(["Spending Score (1-100)"])["CustomerID"].count()#.sum()

df.groupby(["Profession"])["CustomerID"].count()#.sum()

df.groupby(["Work Experience"])["CustomerID"].count()#.sum()

df.groupby(["Family Size"])["CustomerID"].count()#.sum()

"""En base a las agrupaciones realizadas se nota los siguientes puntos:


1.   La columna "Gender" garantiza la consistencia de los datos
2.   La columna "Age" posee algunas inconsistencias ya que los datos obtenidos pertenecen a personas profesionales pero se pueden apreciar edad que son menores a 18 años por lo cual se necesita realizar algun tipo de ajuste
3.   La columna "Annual Income ($)" posee algunos valores de 0 pero podemos asumir que momentaneamente dichas personas estan desempleadas por lo cual no generan ingresos, tomando como referencia que "Annual Income" es el ingreso por año por ejercer su carrera profesional
4.   La columna "Spending Score (1-100)" posee valores de 0 cuando en el rango mostrado se visualiza que los valores solo van del 1 al 100 lo cual necesita realizar algun tipo de ajuste
5.   La columna "Profession" no muestra errores a simple vista pero si quitamos la sección comentada de la suma visualizaremos que las cantidades sumadas por cada tipo es de 1965 por lo que posiblemente hallan valores no reportados al ser nulos y deba realizarse un ajuste
6.   La columna "Work Experience" debemos analizarla a más profundidad tomando como base que los números proporcionados son expresado en años, esta cantidad sumado 18 años debe ser menor a la edad del cliente, ya que tomaremos como premisa que alguien puede empezar a trabajar desde los 18 años en el mejor de los casos
7.   La columna "Family Size" aparentemente esta correcta ya que pueden haber personas que no tienen familia y personas con familias numerosas

En base a lo obtenido generaremos una funcion que nos permita calcular el rango de edad de nuestro clientes que nos facilite el analisis para las personas que inputaron o ingresaron mal los datos de su edad
"""

def AgeRange(age):
    match age:
        case _ if 0 <= age < 18:
            return 'Inconsistente'
        case _ if 18 <= age <= 25:
            return 'De 18 a 25'
        case _ if 25 <= age <= 40:
            return 'De 25 a 40'
        case _ if 40 <= age <= 65:
            return 'De 40 a 65'
        case _ if age > 65:
            return 'Mayor a 65'

"""Aplicamos la funcion al dataframe para obtener la nueva variable rango de edad"""

df['Age Range'] = df['Age'].apply(AgeRange)

df.head(5)

"""Verificamos cuantos clientes ingresaron edades inconsistentes los cuales los hemos agrupado como Inconsistente por no conocer el dato correcto"""

df[df["Age Range"].isin(["Inconsistente"])].groupby(["Age Range"])["CustomerID"].count()

"""Visualizamos la cantidad de registros que tienen el valor 1 antes de realizar el cambio para la variable "Spending Score (1-100)"
"""

df[df["Spending Score (1-100)"]==1]["CustomerID"].count()

"""El tratamiento de datos para la columna "Spending Score (1-100)" de aquellos clientes que tienen un valor de 0 asumiremos que estos valores son más cercanos al 0 por ello han sido redondeados a 0 pero como esta columna solo acepta valores entre 1 y 100 cambiaremos los registros que poseen un valor de 0 por un valor de 1"""

df["Spending Score (1-100)"] = df["Spending Score (1-100)"].replace(0,1)

"""Visualizamos la cantidad de registros que tienen el valor 0 despues de realizar el cambio para la variable "Spending Score (1-100)"
"""

df[df["Spending Score (1-100)"]==0]["CustomerID"].count()

"""Visualizamos la cantidad de registros que tienen el valor 1 despsues de realizar el cambio para la variable "Spending Score (1-100)" y vemos que incremento en 2 unidades"""

df[df["Spending Score (1-100)"]==1]["CustomerID"].count()

"""Como se menciono la columna "Profession" posee valores nulos los cuales no se mostraban en el agrupamiento por ello rellenaremos los valores nulos con un valor "Unknown" porque se desconoce la profesion de estos clientes"""

df['Profession'] =  df['Profession'].fillna('Unknown')

"""Visualizamos nuevamente el agrupamiento y validamos que se tengan los 2000 registros cuando se haga la suma ademas de ello ahora si se visualiza los registros con valor "Unknown"
"""

df.groupby(["Profession"])["CustomerID"].count()#.sum()

"""Respecto al tratamiento de la columna "Work Experience" se busca analizar que al menos las personas que tengan una edad minima de 18 puedan iniciar su experiencia laboral ya que sino implicaria que empezaron a trabajar cuando eran menores de edad lo cual es poco probable porque no tenian quiza la experiencia profesional suficiente"""

df['Status Work Experience'] = np.where(df['Work Experience'] + 18<=df['Age'], 'Consistent Work Experience', 'Inconsistent Work Experience')

"""Mostramos algunos resultados para evidenciar que no cumplen la regla establecida, por ejemplo analizamos el primer caso y visualizamos que la persona tiene 9 años de experiencia y 18 años de edad lo cual indica que debio comenzar a trabajar desde los 9 años lo cual es improbable"""

df[df["Status Work Experience"].isin(["Inconsistent Work Experience"])].head(5)

"""Verificamos cuantos datos no cumplen las reglas establecidas por lo cual estos seran excluidos del analisis posterior"""

df[df["Status Work Experience"].isin(["Inconsistent Work Experience"])]["CustomerID"].count()

"""Definimos nuestro nuevo universo de datos en el cual excluimos los datos que no cumplen las condiciones establecidas"""

df_clear=df[df["Status Work Experience"].isin(["Consistent Work Experience"])]

"""Validamos la nueva cantidad de clientes unicos que formaran nuestro nuevo universo"""

df_clear['CustomerID'].count()

"""**1. Calcular el número y porcentaje sobre el total absoluto de Mujeres monoparentales que han gastado más de 15.000 dólares.**"""

df_clear['Annual Expense'] = df_clear.apply(lambda row: row['Annual Income ($)'] * row['Spending Score (1-100)']/100, axis=1) #axis 1 representa agregarlo como una nueva columna

df_clear

limited_universe = df_clear["CustomerID"].count()

"""Asumiremos que las familias monoparentales son aquellas que tienen valor de 1 en la columna "Family Size", es decir adicional de la persona que fue encuestada hay otro miembro de la familia"""

Subset=df_clear[(df_clear["Annual Expense"]>=15000)&(df_clear["Gender"].isin(["Female"]))&(df_clear["Family Size"]==1)]["CustomerID"].count()

Subset

"""En el primer caso se esta tomando como nuevo universo al que se limito excluyendo los datos que no eran consistentes"""

PercentageLimited=np.round(Subset/limited_universe * 100,2)

PercentageLimited

"""Para este caso se coloca el numero de mujeres que cumplen los filtros del universo ya limitado sobre el total original de clientes proporcionados"""

PercentageTotal=np.round(Subset/original_total*100,2)

PercentageTotal

"""**2. Calcular cuántos abogados (M/F) hay en el dataset que tengan mayor experiencia laboral que la media de ingenieros hombres.**

Se calcula la media de la experiencia de los ingenieros hombres
"""

Exp_male_engineer=np.round(df_clear[(df_clear["Gender"].isin(["Male"]))&(df_clear["Profession"].isin(["Engineer"]))]["Work Experience"].mean(),2)

Exp_male_engineer

df_clear[(df_clear["Work Experience"]>Exp_male_engineer)&(df_clear["Profession"].isin(["Lawyer"]))]

Rpta2=df_clear[(df_clear["Work Experience"]>Exp_male_engineer)&(df_clear["Profession"].isin(["Lawyer"]))]["CustomerID"].count()

Rpta2

"""**3. Dibuja la distribución de abogados en función de su gasto anual (utiliza franjas de gasto) y de su sexo.**"""

chart=df_clear[df_clear["Profession"].isin(["Lawyer"])].groupby(["Gender"])["Annual Expense","Annual Income ($)"].sum()

chart.style.format("{:,.0f}")

chart.plot(kind = 'bar')

coloresMedallas = ['#FF0000','#008000']
chart.plot(kind = 'barh', width=0.8, alpha=0.8,color = coloresMedallas).legend(loc="lower right")

"""**4. Añade algún análisis que creas que puede ser interesante explicando por pantalla el resultado del mismo.**

Definiremos una función que nos ayude a calcular el rango de experiencia de los profesionales
"""

def ExperienceRange(workexp):
    match workexp:
        case _ if workexp == 0:
            return '1. Sin Experiencia'
        case _ if 1 <= workexp < 3:
            return '2. De 1 a 3'
        case _ if 3 <= workexp < 5:
            return '3. De 3 a 5'
        case _ if 5 <= workexp < 8:
            return '4. De 5 a 8'
        case _ if 8 <= workexp < 12:
            return '5. De 8 a 12'
        case _ if 12 <= workexp < 15:
            return '6. De 12 a 15'
        case _ if workexp >= 15:
            return '7. Mas de 15'

"""Creamos el campo Rango de experiencia de trabajo para hacer un analisis con dicha variable"""

df_clear["Range Work Experience"] = df_clear["Work Experience"].apply(ExperienceRange)

"""Generamos una tabla pivoteada de las profesiones, el rango de experiencia y los valores sumarizados de los ingresos anuales"""

WExp_Prof_Inc=pd.pivot_table(df_clear, values=["Annual Income ($)"], index="Range Work Experience",
                       columns="Profession", aggfunc="sum",sort=True)

"""Generamos una tabla pivoteada de las profesiones, el rango de experiencia y los valores sumarizados de los egresos anuales"""

WExp_Prof_Exp=pd.pivot_table(df_clear, values=["Annual Expense"], index="Range Work Experience",
                       columns="Profession", aggfunc="sum",sort=True)

WExp_Prof_Inc

WExp_Prof_Exp

WExp_Prof_Inc.plot(kind = 'bar', alpha=0.7)
plt.legend(["Artist", "Doctor", "Engineer", "Entertainment", "Executive", "Healthcare", "Homemaker", "Lawyer", "Marketing", "Unkwown"], loc ="upper right")
plt.rcParams["figure.figsize"] = (20,5)
plt.xlabel("Range Work Experience")
plt.ylabel("Annual Income")

plt.plot(WExp_Prof_Exp, marker ='*',markersize=8)
plt.legend(["Artist", "Doctor", "Engineer", "Entertainment", "Executive", "Healthcare", "Homemaker", "Lawyer", "Marketing", "Unkwown"], loc ="upper right")
plt.rcParams["figure.figsize"] = (20,5)
plt.xlabel("Range Work Experience")
plt.ylabel("Expenses Income")

"""En base a lo analizado respecto a los ingresos, la profesion y los años de experiencia observamos lo siguiente:


1.   Los artistas son los profesionales que poseen mayores ingresos anuales respecto a las demas profesiones, seguido por los profesionales de cuidado de salud
2.   Se evidencia que a más experiencia que se va adquiriendo por parte de los profesionales los ingresos por parte de su desempeño de la profesión van disminuyendo

En base a lo analizado respecto a los egresos, la profesion y los años de experiencia observamos lo siguiente:


1.   Los artistas son los profesionales que poseen mayores egresos anuales respecto a las demas profesiones, seguido por los profesionales de cuidado de salud
2.   Se evidencia que a más experiencia que se va adquiriendo por parte de los profesionales los egresos van disminuyendo teniendo un comportamiento similar a los ingresos
"""

En conclusión podemos determinar lo siguiente:
- Los Artistas profesionales asi como poseen una mayor cantidad de ingresos tambien poseen las mayores cantidades de egresos respecto a los demas profesionales
- Para todos los profesionales asi como sus ingresos van disminuyendo a lo largo de la experiencia que adquieren sus egresos tambien disminuyen
- Durante los primeros 5 años de experiencia dentro del 1 al 3 año de experiencia se logra obtener una mayor cantidad de ingresos pero estos tambien poseen un incremento en la cantidad de egresos
- Se esperaria que en base a mayor cantidad de experiencia obtenida por los profesionales sus ingresos sean mayores, pero podemos plantear como hipotesis que estos dejan de dedicarse a su profesión y optan por realizar inversiones
que les generen ingresos fuera de su profesión para tener un respaldo adicional a futuro
- Cuando se tiene una experiencia mayor de 15 años asi como se obtiene menores ingresos por el desempeño de la carrera se tiene menos egresos posiblemente porque se busca lo necesario para solventar gastos vitales y obtener mayor tiempo
para compartir con la familia o valorar algunas otras actividades.